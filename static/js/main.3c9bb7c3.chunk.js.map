{"version":3,"sources":["components/Meta.tsx","components/Selector.tsx","components/Warnings.tsx","components/Comparator.tsx","components/Logo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Meta","format","weight","quality","width","height","side","wrapperWidth","css","Math","ceil","defaultProps","Selector","current","onSelect","onUpload","options","images","title","type","onChange","e","target","files","accept","multiple","value","Object","keys","map","key","i","id","Warnings","wrapperHeight","replace","Comparator","useState","left","setLeft","right","setRight","setWidth","setHeight","handleUpload","set","a","file","undefined","path","URL","createObjectURL","name","split","filename","round","size","Promise","resolve","img","Image","onload","src","dimensions","htmlFor","defaultValue","window","innerWidth","changePositionOnHover","itemOne","alt","itemTwo","href","rel","Logo","viewBox","fill","xmlns","d","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","styles","document","getElementById"],"mappings":"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","file":"static/js/main.3c9bb7c3.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { jsx } from '@emotion/react';\nimport tw from 'twin.macro';\n\nimport { Image } from '../types/image';\n\nexport type Props = Image & {\n  side: string;\n  wrapperWidth: number;\n};\n\nconst Meta = ({\n  format,\n  weight,\n  quality,\n  width,\n  height,\n  side,\n  wrapperWidth,\n}: Props): JSX.Element => (\n  <div\n    tw=\"flex flex-wrap mt-4 lg:mt-0\"\n    css={side === 'right' ? tw`flex-row-reverse lg:pr-4` : tw`lg:pl-4`}\n  >\n    <span tw=\"px-1 uppercase\">{format}</span>\n    <span tw=\"px-1\"> | </span>\n    <span tw=\"px-1\">\n      {width}×{height}\n    </span>\n    <span tw=\"px-1\"> | </span>\n    <span tw=\"px-1 text-limonade\">@{Math.ceil(width / wrapperWidth)}x</span>\n    <span tw=\"px-1\"> | </span>\n    <span tw=\"px-1\">{quality}%</span>\n    <span tw=\"px-1\">{side === 'left' ? '→' : '←'}</span>\n    <span tw=\"px-1 text-magenta\">{weight}</span>\n  </div>\n);\n\nMeta.defaultProps = {};\n\nexport default Meta;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { jsx } from '@emotion/react';\nimport tw from 'twin.macro';\n\nimport images from '../images.json';\nimport { Image } from '../types/image';\n\nexport type Props = {\n  current: string;\n  onSelect: (id: string) => void;\n  onUpload: (files: FileList | null) => void;\n  side: string;\n};\n\nconst Selector = ({\n  current,\n  onSelect,\n  onUpload,\n  side,\n}: Props): JSX.Element => {\n  const options: Record<string, Image> = images;\n  return (\n    <>\n      <label\n        tw=\"flex items-center h-10 px-3 bg-white rounded cursor-pointer hover:bg-limonade transition-colors\"\n        title=\"Use your own image\"\n      >\n        ➕\n        <input\n          type=\"file\"\n          tw=\"hidden\"\n          onChange={e => onUpload(e.target.files)}\n          accept=\"image/*\"\n          multiple={false}\n        />\n      </label>\n      <select\n        tw=\"w-2/3 pr-8 truncate rounded lg:w-1/2 xl:w-1/4 text-minuit\"\n        css={side === 'right' ? tw`mr-2` : tw`ml-2`}\n        onChange={e => onSelect(e.target.value)}\n        value={current}\n      >\n        <option value=\"choose\">Choose an existing file</option>\n        {Object.keys(options).map((key, i) => (\n          <option key={`option-${side}-${i}`} value={key}>\n            {options?.[key].id}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n};\n\nexport default Selector;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { jsx } from '@emotion/react';\nimport tw from 'twin.macro';\n\nimport { Image } from '../types/image';\n\nexport type Props = Image & {\n  wrapperWidth: number;\n  wrapperHeight: number;\n};\n\nconst Warnings = ({\n  width,\n  height,\n  weight,\n  wrapperWidth,\n  wrapperHeight,\n}: Props): JSX.Element => (\n  <div tw=\"mt-4 font-mono text-sm space-y-2 text-limonade\">\n    {wrapperWidth / wrapperHeight !== width / height && (\n      <p>\n        ⚠️ The wrapper's <b>ratio</b> don't match the image ratio\n      </p>\n    )}\n    {width / wrapperWidth > 2 && (\n      <p>\n        ⚠️ <b>Too big</b> for this usage, even for retina display; max @2x, here\n        @{Math.ceil(width / wrapperWidth)}x\n      </p>\n    )}\n    {+weight.replace('Ko', '') > 500 && (\n      <p>\n        ⚠️ Very <b>heavy</b>, check the compression ratio\n      </p>\n    )}\n  </div>\n);\n\nWarnings.defaultProps = {};\n\nexport default Warnings;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react';\nimport {\n  ReactCompareSlider,\n  ReactCompareSliderImage,\n} from 'react-compare-slider';\nimport { jsx } from '@emotion/react';\nimport tw from 'twin.macro';\n\nimport images from '../images.json';\nimport type { Image } from '../types/image';\n\nimport Meta from './Meta';\nimport Selector from './Selector';\nimport Warnings from './Warnings';\n\nconst Comparator = (): JSX.Element => {\n  const options: Record<string, Image> = images;\n  const [left, setLeft] = useState(options['webp-30@2x']);\n  const [right, setRight] = useState(options['jpeg-65@1x']);\n  const [width, setWidth] = useState(1200);\n  const [height, setHeight] = useState(800);\n\n  const handleUpload = async (\n    files: null | FileList,\n    set: any // eslint-disable-line @typescript-eslint/no-explicit-any\n  ): Promise<void> => {\n    const file = files?.[0];\n    if (file === null || file === undefined) return;\n\n    const path = URL.createObjectURL(file);\n\n    const format = file.name.split('.')[1];\n    const filename = file.name;\n    const weight = `${Math.round(file.size / 1000)}Ko`;\n    const dimensions: { width: number; height: number } = await new Promise(\n      resolve => {\n        const img = new Image();\n        img.onload = () => {\n          resolve({\n            height: img.height,\n            width: img.width,\n          });\n        };\n        img.src = path;\n      }\n    );\n\n    set({\n      format,\n      weight,\n      quality: '?',\n      width: dimensions.width,\n      height: dimensions.height,\n      filename,\n      path,\n    });\n  };\n\n  return (\n    <div tw=\"pt-12 text-white bg-minuit\">\n      <div tw=\"container px-2 mx-auto md:px-10\">\n        <h3 tw=\"font-serif text-lg font-bold md:text-xl\">Display size</h3>\n        <div tw=\"flex mt-4 space-x-4\">\n          <div tw=\"flex flex-col space-y-2\">\n            <label htmlFor=\"width\">Width</label>\n            <input\n              type=\"number\"\n              id=\"width\"\n              defaultValue={width}\n              tw=\"rounded text-minuit\"\n              onChange={e => setWidth(+e.target.value)}\n            />\n          </div>\n          <div tw=\"flex flex-col space-y-2\">\n            <label htmlFor=\"width\">Height</label>\n            <input\n              type=\"number\"\n              id=\"width\"\n              defaultValue={height}\n              tw=\"rounded text-minuit\"\n              onChange={e => setHeight(+e.target.value)}\n            />\n          </div>\n        </div>\n        <p tw=\"mt-2 lg:w-1/3\">\n          <i>\n            The size of the image's wrapper; to test retina behaviour, for\n            example.\n          </i>\n        </p>\n        <div tw=\"py-4 mt-6 text-lg grid grid-cols-2\">\n          <div>\n            <div tw=\"flex flex-wrap items-center\">\n              <Selector\n                current={left.id}\n                side=\"left\"\n                onSelect={id => id !== 'choose' && setLeft(options[id])}\n                onUpload={files => handleUpload(files, setLeft)}\n              />\n              <Meta {...left} side=\"left\" wrapperWidth={width} />\n            </div>\n            <Warnings {...left} wrapperWidth={width} wrapperHeight={height} />\n          </div>\n          <div>\n            <div tw=\"flex flex-row-reverse flex-wrap items-center\">\n              <Selector\n                current={right.id}\n                side=\"right\"\n                onSelect={id => id !== 'choose' && setRight(options[id])}\n                onUpload={files => handleUpload(files, setRight)}\n              />\n              <Meta {...right} side=\"right\" wrapperWidth={width} />\n            </div>\n            <div tw=\"text-right\">\n              <Warnings\n                {...right}\n                wrapperWidth={width}\n                wrapperHeight={height}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div tw=\"relative pb-12 mt-6 overflow-x-auto\">\n        <ReactCompareSlider\n          tw=\"rounded-lg\"\n          css={[\n            {\n              width,\n              height,\n            },\n            window.innerWidth > width && tw`left-1/2 -translate-x-1/2`,\n          ]}\n          changePositionOnHover\n          itemOne={<ReactCompareSliderImage src={left.path} alt=\"Left image\" />}\n          itemTwo={\n            <ReactCompareSliderImage src={right.path} alt=\"Right image\" />\n          }\n        />\n        {(options[left.id] !== undefined ||\n          options[right.id] !== undefined) && (\n          <p tw=\"mt-4 italic text-center text-ninja\">\n            Image by{' '}\n            <a\n              href=\"https://unsplash.com/@matthewhenry\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              tw=\"underline hover:text-white transition-colors\"\n            >\n              Matthew Henry\n            </a>\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nComparator.defaultProps = {};\n\nexport default Comparator;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport { jsx } from '@emotion/react';\nimport tw from 'twin.macro';\n\nconst Logo = (): JSX.Element => (\n  <svg\n    width=\"172\"\n    height=\"28\"\n    viewBox=\"0 0 172 28\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M153.893 6.60262H150.267V15.6751C150.267 18.0227 148.756 19.6856 146.641 19.6856C144.949 19.6856 143.861 18.4629 143.861 16.0419V6.60262H140.295V16.4087C140.295 21.0795 142.834 23.0358 145.759 23.0358C147.814 23.0358 149.445 21.8742 150.231 20.7371H150.255V22.669H153.881V6.60262H153.893ZM45.8707 22.6812H49.9199V19.1109H46.7772C46.2696 19.1109 45.8707 18.683 45.8707 18.1939V9.96507H49.9199V6.60262H45.8707V2.01747H42.2446V6.60262H38.9206V9.96507H42.2446V19.1109C42.2446 21.0917 43.8763 22.6812 45.8707 22.6812ZM108.518 22.6812H112.568V19.1109H109.425C108.917 19.1109 108.518 18.683 108.518 18.1939V9.96507H112.568V6.60262H108.518V2.01747H104.892V6.60262H101.568V9.96507H104.892V19.1109C104.892 21.0917 106.512 22.6812 108.518 22.6812ZM160.215 13.0585C160.602 10.9555 162.209 9.5738 164.107 9.5738C165.944 9.5738 167.612 10.9432 167.951 13.0585H160.215ZM164.288 23.048C167.528 23.048 170.09 21.8009 171.637 18.0349L167.83 17.607C167.25 19.0131 165.956 19.8323 164.3 19.8323C162.27 19.8323 160.553 18.4629 160.215 15.8218H172C172 9.34148 168.229 6.22358 164.022 6.22358C159.695 6.22358 156.287 9.64716 156.287 14.6603C156.287 19.6734 159.695 23.048 164.288 23.048ZM129.453 19.6611C127.012 19.6611 125.102 17.607 125.102 14.6725C125.102 11.7135 127.012 9.68384 129.453 9.68384C131.895 9.68384 133.829 11.7013 133.829 14.6725C133.829 17.607 131.895 19.6611 129.453 19.6611ZM117.306 4.89083C118.659 4.89083 119.699 3.81485 119.699 2.44541C119.699 1.10044 118.672 0 117.306 0C115.94 0 114.888 1.10044 114.888 2.44541C114.888 3.81485 115.94 4.89083 117.306 4.89083ZM133.744 28H137.37L137.431 6.60262H133.805V8.37555H133.708C132.741 7.39738 131.17 6.23581 128.752 6.23581C124.582 6.23581 121.379 9.65939 121.379 14.6725C121.379 19.6856 124.582 23.048 128.752 23.048C131.17 23.048 132.741 21.8865 133.708 20.8716H133.805L133.744 28ZM115.493 22.6812H119.058V6.60262H115.493V22.6812ZM91.4029 23.048C93.7599 23.048 95.2104 22.131 96.4191 19.8445H97.3861C97.3861 21.9231 97.6883 22.6812 98.8365 22.6812H102.136V19.1109H100.057V12.6306C100.057 8.77904 97.1806 6.24803 93.1677 6.24803C89.2031 6.23581 86.423 8.25328 86.2417 11.7135H89.8679C90.1096 10.1852 91.415 9.26812 93.1072 9.26812C94.8236 9.26812 96.4312 10.3686 96.4312 12.4227V12.9729C96.4312 12.9729 95.0774 12.9729 91.7414 13.1197C87.4142 13.3031 85.9396 15.6629 85.9396 18.0105C85.9396 21.0917 88.2119 23.048 91.4029 23.048ZM92.2249 20.0279C90.7502 20.0279 89.6866 19.2943 89.6866 17.9493C89.6866 16.7878 90.2668 15.9686 92.5271 15.7729C94.4006 15.6262 96.4191 15.6262 96.4191 15.6262V16.1397C96.4312 18.6463 94.9082 20.0279 92.2249 20.0279ZM80.1619 22.6812H84.2111V19.1109H81.0684C80.5608 19.1109 80.1619 18.683 80.1619 18.1939V9.96507H84.2111V6.60262H80.1619V2.01747H76.5358V6.60262H73.2118V9.96507H76.5358V19.1109C76.5358 21.0917 78.1796 22.6812 80.1619 22.6812ZM54.7547 4.89083C56.0602 4.89083 57.1117 3.81485 57.1117 2.44541C57.1117 1.10044 56.0481 0 54.7547 0C53.3647 0 52.3373 1.10044 52.3373 2.44541C52.3373 3.81485 53.3647 4.89083 54.7547 4.89083ZM65.8145 23.048C69.5373 23.048 72.0031 20.945 72.0031 18.0105C72.0031 14.6114 69.3197 13.7555 66.9265 13.2175C64.6299 12.6306 62.9377 12.4227 62.9377 11.041C62.9377 10.0017 63.9047 9.39039 65.2585 9.39039C66.9265 9.39039 67.8209 10.3686 67.9781 11.4934H71.7976C71.4954 8.33886 68.9934 6.23581 65.3914 6.23581C61.8862 6.23581 59.227 8.49782 59.227 11.2734C59.227 14.8437 62.2246 15.7729 64.7871 16.3476C67.0836 16.8978 68.389 17.3013 68.389 18.4017C68.389 19.4044 67.1803 19.8934 65.754 19.8934C64.4003 19.8934 63.2762 19.3065 62.9498 17.8148H58.9006C59.2512 21.0917 61.8257 23.048 65.8145 23.048ZM52.845 22.6812H56.5316V6.60262H52.845V22.6812ZM23.8117 22.6812H27.4378V13.6087C27.4378 11.2611 28.9487 9.59825 31.0639 9.59825C32.7561 9.59825 33.844 10.821 33.844 13.2419V22.6812H37.4097V12.8751C37.4097 8.20437 34.8714 6.24803 31.9463 6.24803C29.8915 6.24803 28.2597 7.40961 27.4741 8.54673H27.4378V6.60262H23.8117V22.6812ZM7.37316 13.7555L10.3949 5.13537H11.3015L14.3837 13.7555H7.37316ZM0 22.6812H3.77119L5.9227 17.4603H15.8946L18.0098 22.6935H21.6964L13.1145 1.32052H8.52143L0 22.6812Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n\nexport default Logo;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport tw from 'twin.macro';\n\nimport Comparator from './components/Comparator';\nimport Logo from './components/Logo';\n\nconst App = (): JSX.Element => (\n  <>\n    <header tw=\"container px-2 pt-12 mx-auto md:px-10\">\n      <a\n        aria-label=\"Antistatique logo\"\n        tw=\"text-magenta\"\n        href=\"https://antistatique.net/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Logo />\n      </a>\n    </header>\n\n    <main tw=\"mt-20\">\n      <div tw=\"container px-2 mx-auto md:px-10\">\n        <h1 tw=\"font-serif text-3xl text-left md:text-6xl mb-7\">Images</h1>\n\n        <div tw=\"w-full mt-12 text-left lg:w-5/12\">\n          <p tw=\"text-xl md:text-2xl\">\n            A small tool to help you make the right decision when{' '}\n            <b>choosing image format, size and quality</b> (compression ratio).\n          </p>\n        </div>\n      </div>\n\n      <div tw=\"mt-12\">\n        <Comparator />\n      </div>\n\n      <div tw=\"container px-2 mx-auto md:px-10\">\n        <div tw=\"md:w-1/2\">\n          <h2 tw=\"mt-12 font-serif text-2xl font-bold md:text-3xl md:mb-5 md:mt-14\">\n            How to use it?\n          </h2>\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl md:mb-5\">\n            First, choose the wrapper <b>resolution</b>. It should be the size\n            used to display your image on your website. Then, try different\n            options to see which is the best for this case.\n          </p>\n\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl\">\n            Here are the <b>criteria</b> to keep in mind to make a choice:\n          </p>\n\n          <ul tw=\"px-6 mt-2 text-lg list-disc text-sensei md:text-xl\">\n            <li>\n              <b>Weight</b> should be as low as possible\n            </li>\n            <li>\n              The image should be as <b>visually pleasing</b> as possible on any\n              kind of screen\n            </li>\n          </ul>\n\n          <h2 tw=\"mt-12 font-serif text-2xl font-bold md:text-3xl md:mb-5 md:mt-14\">\n            How to generate images?\n          </h2>\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl md:mb-5\">\n            There are a lot of software options, but the easiest way to do it,\n            is to use{' '}\n            <a\n              href=\"https://imagemagick.org/index.php\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              tw=\"underline hover:text-minuit transition-colors\"\n            >\n              ImageMagick\n            </a>\n            .\n          </p>\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl\">For example:</p>\n          <div tw=\"max-w-full overflow-x-auto\">\n            <pre>{`\n# One by one            \n$ magick original.jpeg \\\\\n  -resize 2400x1600 \\\\\n  -format webp \\\\\n  -quality 30 \\\\\n  30@2x.webp\n\n# By batch, in a directory\n$ mogrify \\\\\n  -format webp \\\\\n  -quality 30 \\\\\n  -resize 2400x1600 \\\\\n  *.webp\n            `}</pre>\n          </div>\n\n          <h2 tw=\"mt-12 font-serif text-2xl font-bold md:text-3xl md:mb-5 md:mt-14\">\n            Any advice?\n          </h2>\n\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl\">\n            Use modern image formats like <b>AVIF</b> or <b>WebP</b> for modern\n            display at <b>2x</b> with a heavy compression and <b>JPEG</b> for\n            old display/browser at <b>1x</b> with medium compression.\n          </p>\n\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl\">\n            You should have something like:\n          </p>\n\n          <div tw=\"max-w-full overflow-x-auto\">\n            <pre>{`\n<picture>\n  <source srcSet=\"my-image@2x.avif\" type=\"image/avif\" />\n  <source srcSet=\"my-image@2x.webp\" type=\"image/webp\" />\n  <source srcSet=\"my-image@1x.jpeg\" type=\"image/jpeg\" />\n  <img src=\"my-image@1x.jpeg\" />\n</picture>\n            `}</pre>\n          </div>\n\n          <h2 tw=\"mt-12 font-serif text-2xl font-bold md:text-3xl md:mb-5 md:mt-14\">\n            What about browser support?\n          </h2>\n          <p tw=\"mt-4 text-lg text-sensei md:text-xl md:mb-5\">\n            It’s obvious that modern formats are not supported by every browser.\n            Take a look for yourself, based on your audience:\n          </p>\n          <ul tw=\"px-6 mt-2 text-lg list-disc text-sensei md:text-xl\">\n            <li>\n              <a\n                href=\"https://caniuse.com/webp\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                tw=\"underline hover:text-minuit transition-colors\"\n              >\n                WebP\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://caniuse.com/avif\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                tw=\"underline hover:text-minuit transition-colors\"\n              >\n                AVIF\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </main>\n\n    <footer tw=\"relative mt-12 text-white bg-balsamique\">\n      <div tw=\"container px-2 py-12 mx-auto md:px-10\">\n        <p tw=\"text-center text-balsamique-light\">\n          Made with ❤️ by{' '}\n          <a\n            href=\"https://antistatique.net/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            tw=\"underline hover:text-white transition-colors\"\n          >\n            Antistatique\n          </a>\n        </p>\n      </div>\n    </footer>\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { css, Global } from '@emotion/react';\nimport tw, { GlobalStyles } from 'twin.macro';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <Global\n      styles={css`\n        body {\n          ${tw`text-minuit`}\n        }\n      `}\n    />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}